<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbW1uUW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltb
        W+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+tbW1t2W1tb/VtbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb21tbW/9bW1uVWlpaJVtbW35cXFw9WlpaZgAA
        AAAAAAAAAAAAAAAAAABaWlqFW1tbHFtbW51AQEAEW1tbtltbW95bW1v/W1tb1VtbW6NbW1vBW1tbuFtb
        W75bW1ulW1tbpltbW6JbW1upW1tbwltbW7RbW1vFW1tbmltbW+JbW1veW1tb/1tbW5UAAAAAWFhYMVxc
        XHJbW1tJXFxcWVtbW2JaWlpBXFxcel1dXSlbW1uRYGBgEAAAAABbW1u2W1tb3ltbW/9cXFzcW1tbsVtb
        W8pbW1vFW1tbyFtbW8dbW1vGW1tbyVtbW8VbW1vKXFxcw1tbW8xbW1urW1tb51tbW95bW1v/W1tblVpa
        WiVbW1t+XFxcPVpaWmZaWlpVWVlZTVpaWm5bW1s1WlpahVtbWxxbW1udQEBABFtbW7ZbW1veW1tb/Fpa
        WvhbW1vwW1tb9ltbW/JbW1v1W1tb9FtbW/NbW1v1W1tb8ltbW/dbW1vwWlpa+FtbW+5bW1v6W1tb21tb
        W5RbW1vpW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb51tb
        W3YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVDFtbWzsAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABbW1uDXFxclltbW3tbW1scAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFZWVkoW1tbqVVV
        VQ8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFpa
        WltdXV1CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABmZmYKVVVVDAAAAAAAAAAAAAAAAP//AAD//wAAAAEAAAAAAAA/1AAAAAAAAD/sAAAAAAAAP9QAAAAA
        AAAAAQAA//8AAP8/AAD/7wAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZWVkUW1tbrVxcXOpbW1vuW1tb7ltb
        W+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltb
        W+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+RbW1uHgICAAltbW65bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1trW1tb9Vtb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W7RbW1v/W1tb/1tbW/9bW1vxW1tb7ltbW/NbW1v/W1tb7ltbW+5bW1v2W1tb+1tbW+5bW1vuW1tb7ltb
        W+5bW1vuW1tb7ltbW+5bW1vuW1tb7ltbW+9bW1v/W1tb8ltbW+5bW1vyW1tb/1tbW+9bW1vuW1tb9Vtb
        W/9bW1v/W1tbvltbW/9bW1v/W1tb/1tbWy0AAAAAW1tbSVtbW/sAAAAAAAAAAFxcXHpbW1vKAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVVVVDFtbW/9ZWVk5AAAAAFxcXD1bW1v/YGBgCAAA
        AABaWlpuW1tb/1tbW/9bW1u+W1tb/1tbW/9bW1v/W1tbLQAAAABbW1tJW1tb+wAAAAAAAAAAXFxceltb
        W8oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUMW1tb/1lZWTkAAAAAXFxcPVtb
        W/9gYGAIAAAAAFpaWm5bW1v/W1tb/1tbW75bW1v/W1tb/1tbW/9bW1udXFxciFxcXKpbW1v9XFxciFxc
        XIhbW1vBW1tb5lxcXIhcXFyIXFxciFxcXIhcXFyIXFxciFxcXIhcXFyIXFxciFxcXI5bW1v/W1tbolxc
        XIhcXFykW1tb/1tbW4xcXFyIW1tbu1tbW/9bW1v/W1tbvltbW/9bW1v/W1tb/1tbW8dbW1u7W1tbu1tb
        W7tbW1vVWlpa+FtbW7tbW1u7W1tb4ltbW+tbW1u7W1tbu1tbW+9bW1veW1tbu1tbW7tbW1v8XFxc0Vtb
        W7tbW1vFW1tb/1tbW8RbW1u7W1tbu1tbW7tbW1vYW1tb/1tbW/9bW1u+W1tb/1tbW/9bW1v/W1tbLQAA
        AAAAAAAAAAAAAFtbW2JbW1vjAAAAAAAAAABbW1uRXFxcsgAAAAAAAAAAW1tbwltbW4EAAAAAAAAAAFtb
        W/NbW1tRAAAAAFpaWiVbW1v/XV1dIQAAAAAAAAAAAAAAAFpaWm5bW1v/W1tb/1tbW75bW1v/W1tb/1tb
        W/9bW1stAAAAAAAAAAAAAAAAW1tbYltbW+MAAAAAAAAAAFtbW5FcXFyyAAAAAAAAAABbW1vCW1tbgQAA
        AAAAAAAAW1tb81tbW1EAAAAAWlpaJVtbW/9dXV0hAAAAAAAAAAAAAAAAWlpabltbW/9bW1v/W1tbvltb
        W/9bW1v/W1tb/1tbW8dbW1u7W1tbu1tbW7tbW1vVWlpa+FtbW7tbW1u7W1tb4ltbW+tbW1u7W1tbu1tb
        W+9bW1veW1tbu1tbW7tbW1v8XFxc0VtbW7tbW1vFW1tb/1tbW8RbW1u7W1tbu1tbW7tbW1vYW1tb/1tb
        W/9bW1u+W1tb/1tbW/9bW1v/W1tbnVxcXIhcXFyqW1tb/VxcXIhcXFyIW1tbwVtbW+ZcXFyIXFxciFtb
        W9dbW1vQXFxciFxcXIhbW1vuW1tbuVxcXIhcXFyOW1tb/1tbW6JcXFyIXFxcpFtbW/9bW1uMXFxciFtb
        W7tbW1v/W1tb/1tbW75bW1v/W1tb/1tbW/9bW1stAAAAAFtbW0lbW1v7AAAAAAAAAABcXFx6W1tbygAA
        AAAAAAAAXFxcqlxcXJkAAAAAAAAAAFtbW9pbW1tqAAAAAFVVVQxbW1v/WVlZOQAAAABcXFw9W1tb/2Bg
        YAgAAAAAWlpabltbW/9bW1v/W1tbvltbW/9bW1v/W1tb/1tbWy0AAAAAW1tbSVtbW/sAAAAAAAAAAFxc
        XHpbW1vKAAAAAAAAAABcXFyqXFxcmQAAAAAAAAAAW1tb2ltbW2oAAAAAVVVVDFtbW/9ZWVk5AAAAAFxc
        XD1bW1v/YGBgCAAAAABaWlpuW1tb/1tbW/9bW1u+W1tb/1tbW/9bW1v/W1tb8VtbW+5bW1vzW1tb/1tb
        W+5bW1vuW1tb9ltbW/tbW1vuW1tb7ltbW/laWlr4W1tb7ltbW+5bW1v9W1tb9VtbW+5bW1vvW1tb/1tb
        W/JbW1vuW1tb8ltbW/9bW1vvW1tb7ltbW/VbW1v/W1tb/1tbW75bW1vzW1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tbsVtbW6ZbW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tb
        W/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1v/W1tb/1tbW/9bW1tiW1tbDlxc
        XI5bW1vQW1tb3VtbW91bW1vdW1tb3VtbW91bW1vdW1tb3VtbW91bW1vdW1tb3VtbW91bW1vdW1tb3Vtb
        W91bW1vdW1tb3VtbW91bW1vdW1tb3VtbW91bW1vdW1tb3VtbW91bW1vdW1tb3VtbW91bW1vFXFxcbAAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFtbW0NbW1vaXFxcJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAVVVVA1tbW75bW1vpW1tbc1lZWTxeXl4TAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXV1dC1tbW3tbW1vYW1tb/1tbW/9bW1vaW1tbfklJ
        SQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABVVVUMXV1dN1tb
        W3BbW1vkW1tbtgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAF1dXSlbW1v7W1tbQwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtbW7xbW1uKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXFxcmVtbW6YAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWFgdXFxcJAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////////////////////+AAAABAAAAAQAAAAAAAAAAHd/7uB3f
        +7gAAAAAAAAAAB9mbvgfZm74AAAAAAAAAAAd2bu4Hdm7uAAAAAAAAAAAAAAAAYAAAAP///////9/////
        P////8P////8/////v////5////+f///////////
</value>
  </data>
</root>